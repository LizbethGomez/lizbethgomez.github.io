BARD1_ADULT2_2=BARD1_ADULT2_2 %>% # renamed this variable, so it is easier to include in the model
rename(PERIOD_j = aacd)
#OK- data structure as wished
BARD1_ADULT3=BARD1_ADULT2_2 # doing this so i dont have to change the code moving forward
BARD1_AD=BARD1_ADULT3 # doing this so i dont have to change the code moving forward not sure why it is repeated...
glimpse(BARD1_AD)  # looks ready for analyses
# lets see what the sample size is:
sample_size = unique(BARD1_AD$part) # 213 different individuals
BARD1_AD = BARD1_AD %>%
mutate(TRT = if_else(PERIOD_j == "aacd_w", "W", if_else(PERIOD_j=="aacd_y","Y", if_else(PERIOD_j=="aacd_x","X", if_else(PERIOD_j=="aacd_z", "Z", NA_character_)))))
BARD1_AD$TRT = as.factor(BARD1_AD$TRT) # TURNING TRT INTO A FACTOR
BARD1_AD$TRT = relevel(BARD1_AD$TRT, ref = "Y")
BARD1_AD <- BARD1_AD%>%
mutate(NO2.scaled = scale(NO2_ij),
PM.scaled = scale(PM_ij),
O3.scaled = scale(O3_ij),
site.scaled =scale(site))
set_theme(
geom.outline.color = "antiquewhite4",
geom.outline.size = 1,
geom.label.size = 2,
geom.label.color = "grey50",
title.color = "midnightblue",
title.size = 1.5,
axis.angle.x = 90,
axis.textcolor = "midnightblue",
base = theme_bw()
)
#ICC outcome
Exa.ICC <- ICCest(part, aacd_rate, data = BARD1_AD) ##not so great: 0.17(0.10,0.24)
Exa.ICC$ICC
Exa.ICC$LowerCI
Exa.ICC$UpperCI
BARD1_AD = BARD1_AD %>%
mutate(PM_binary = if_else(TRT == "Y" & PM_ij >= 7.95, "High_PM",
if_else(TRT == "W" & PM_ij >= 7.98, "High_PM",
if_else(TRT == "X" & PM_ij >= 7.93, "High_PM",
if_else(TRT == "Z" & PM_ij >= 7.73, "High_PM", "Low_PM", NA_character_)))))
BARD1_AD = BARD1_AD %>%
mutate(NO2_binary = if_else(TRT == "Y" & NO2_ij >= 9.41, "High_NO2",
if_else(TRT == "W" & NO2_ij >= 9.53, "High_NO2",
if_else(TRT == "X" & NO2_ij >= 9.15, "High_NO2",
if_else(TRT == "Z" & NO2_ij >= 9.46, "High_NO2", "Low_NO2", NA_character_)))))
BARD1_AD = BARD1_AD %>%
mutate(O3_binary = if_else(TRT == "Y" & O3_ij >= 24.01, "High_O3",
if_else(TRT == "W" & O3_ij >= 25.22, "High_O3",
if_else(TRT == "X" & O3_ij >= 25.76, "High_O3",
if_else(TRT == "Z" & O3_ij >= 25.64, "High_O3", "Low_O3", NA_character_)))))
BARD1_AD$NO2_binary = as.factor(BARD1_AD$NO2_binary)
BARD1_AD$NO2_binary = relevel(BARD1_AD$NO2_binary, ref = "Low_NO2")
BARD1_AD$PM_binary = as.factor(BARD1_AD$PM_binary)
BARD1_AD$PM_binary = relevel(BARD1_AD$PM_binary, ref = "Low_PM")
BARD1_AD$O3_binary = as.factor(BARD1_AD$O3_binary)
BARD1_AD$O3_binary = relevel(BARD1_AD$O3_binary, ref = "Low_O3")
mod.ran.int <- lmer(aacd_rate  ~ TRT+ PM_binary + TRT*PM_binary+# SAMPLE SIZE 211
(1|part)+(1|site), data = BARD1_AD)
summary(mod.ran.int)
car::Anova(glmer(aacd_rate ~ TRT + PM_binary+TRT*PM_binary+
(1|part)+(1|site), data = BARD1_AD), type="III")
plot_model(mod.ran.int,
axis.labels=c("1 x ICS + LABA*High PM 2.5",
"2.5 x ICS + LABA*High PM 2.5",
"5 x ICS*High PM 2.5",
"High PM 2.5",
"1 x ICS + LABA",
"2.5 x ICS + LABA",
"5 x ICS"),
show.values=TRUE, show.p=TRUE,
title="Annualized Asthma Control Days")
sjPlot:: tab_model(mod.ran.int,
show.re.var= TRUE,
pred.labels =c("(Intercept)",
"5 x ICS",
"2.5 x ICS +LABA",
"1 x ICS + LABA",
"High PM 2.5",
"5 x ICS*High PM",
"2.5 x ICS + LABA*High PM 2.5",
"1 x ICS + LABA*High  PM 2.5"),
dv.labels= "Effects on AACD")
knitr::opts_chunk$set(echo = TRUE)
setwd("S:/BARD Code and Data/BARD Analyses Liz")
library(tidyverse)
library(lme4)
library(ICC)
library(sjmisc)
library(sjPlot)
BARD1_ADULT = read.csv("adults_all_bard.csv") #The BARD Dataset has 294 adults
#gis = readxl::read_xlsx ("gis_bard3.xlsx")
#BARD1_ADULT= merge(BARD1_ADULT, gis, by="part")
View(BARD1_ADULT)
knitr::opts_chunk$set(echo = TRUE)
setwd("S:/BARD Code and Data/BARD Analyses Liz")
library(tidyverse)
library(lme4)
library(ICC)
library(sjmisc)
library(sjPlot)
BARD1_ADULT = read.csv("adults_all_bard.csv") #The BARD Dataset has 294 adults
#gis = readxl::read_xlsx ("gis_bard3.xlsx")
#BARD1_ADULT= merge(BARD1_ADULT, gis, by="part")
BARD1_ADULT2=BARD1_ADULT %>%
pivot_longer(
cols = starts_with("n_sigex"),
names_to = "sigex",
values_to = "sigex_count",
values_drop_na = TRUE
)
glimpse(BARD1_ADULT2) # take another look at the data structure -
# n_sigex has the period
# then i want to remove all the variables that belong to adults and other tier specific outcomes
BARD1_ADULT2=BARD1_ADULT2 %>%
select(-ends_with("_Q"), -ends_with("_R"), -ends_with("_S"), -ends_with("_T"))
# went from 88 to 59 variables
# lets look at the data
glimpse(BARD1_ADULT2) # good good
# then I want to transpose the NO2 variable
BARD1_ADULT2=BARD1_ADULT2 %>%
pivot_longer(
cols = starts_with("NO2_"),
names_to = "NO2",
values_to = "NO2_ij"
)
# left with 3292 observations, this needs to be trimmed down
glimpse(BARD1_ADULT2) # checked my variables, there are 16 rows per ID, need to match period to specific NO2
# Matching the NO2 to the specific period - this would effectively lead to the original 823 observations
BARD1_ADULT2 = BARD1_ADULT2 %>%
mutate(NO_ij =if_else(NO2 == "NO2_W" & sigex=="n_sigex_w", "NO2_ij",
if_else (NO2 == "NO2_X" & sigex=="n_sigex_x","NO2_ij",
if_else(NO2 == "NO2_Y" & sigex=="n_sigex_y", "NO2_ij",
if_else(NO2 == "NO2_Z" & sigex=="n_sigex_z", "NO2_ij", NA_character_)))))
# remove NAs to go back to 823
BARD1_ADULT2=BARD1_ADULT2 [!is.na(BARD1_ADULT2$NO_ij),] # yes!
# removed the newly created variable - no need for it anymore
BARD1_ADULT2=BARD1_ADULT2 %>%
select(-NO_ij)
#MOVING ON TO PM - essentially this is a repeated step - there has to be a faster way to complete this (for future me)
# take data set and make it long again based on PM
BARD1_ADULT2_1=BARD1_ADULT2 %>%
pivot_longer(
cols = starts_with("PM_"),
names_to = "PM_25",
values_to = "PM_ij"
)
## Matching the pm to the specific period - this would effectively lead to the original 823 observations
BARD1_ADULT2_1 = BARD1_ADULT2_1 %>%
mutate(PM25_ij =if_else(PM_25 == "PM_W" & sigex=="n_sigex_w", "PM_ij",
if_else (PM_25 == "PM_X" & sigex=="n_sigex_x","PM_ij",
if_else(PM_25 == "PM_Y" & sigex=="n_sigex_y", "PM_ij",
if_else(PM_25 == "PM_Z" & sigex=="n_sigex_z", "PM_ij", NA_character_)))))
# remove NAs to go back to 823
BARD1_ADULT2_1=BARD1_ADULT2_1 [!is.na(BARD1_ADULT2_1$PM25_ij),]
# removed the newly created variable - no need for it anymore
BARD1_ADULT2_1=BARD1_ADULT2_1 %>%
select(-PM25_ij)
#NOW OZONE - repeated steps turning Ozone into long format
BARD1_ADULT2_2=BARD1_ADULT2_1 %>%
pivot_longer(
cols = starts_with("O3_"),
names_to = "O_3",
values_to = "O3_ij"
)
## Matching the pm to the specific period - this would effectively lead to the original 823 observations
BARD1_ADULT2_2 = BARD1_ADULT2_2 %>%
mutate(OZONE_ij =if_else(O_3 == "O3_W" & sigex=="n_sigex_w", "O3_ij",
if_else (O_3 == "O3_X" & sigex=="n_sigex_x","O3_ij",
if_else(O_3 == "O3_Y" & sigex=="n_sigex_y", "O3_ij",
if_else(O_3 == "O3_Z" & sigex=="n_sigex_z", "O3_ij", NA_character_)))))
# remove NAs to go back to 823
BARD1_ADULT2_2=BARD1_ADULT2_2 [!is.na(BARD1_ADULT2_2$OZONE_ij),]
# removed the newly created variable - no need for it anymore
BARD1_ADULT2_2=BARD1_ADULT2_2 %>%
select(-OZONE_ij)
#take a look at the data
glimpse(BARD1_ADULT2_2) # much better
BARD1_ADULT2_2=BARD1_ADULT2_2 %>% # renamed this variable, so it is easier to include in the model
rename(PERIOD_j = sigex)
#OK- data structure as wished
BARD1_ADULT3=BARD1_ADULT2_2 # doing this so i dont have to change the code moving forward
BARD1_AD=BARD1_ADULT3 # doing this so i dont have to ADange the code moving forward not sure why it is repeated...
glimpse(BARD1_AD)  # looks ready for analyses
# lets see what the sample size is:
sample_size = unique(BARD1_AD$part) # 294 different individuals
library(tidyverse)
setwd("C:/Users/lg688/OneDrive - Drexel University/Desktop")
mixt = read.csv("Book1.csv")
mixt = read.xlsx("Book1.xlsx")
mixt = readxl::read_xlsx("Book1.xlsx")
View(mixt)
mixt$consecutive_numbers<-1:nrow(mixt)
mixt
mixt = readxl::read_xlsx("Book1.xlsx")
mixt$consecutive_numbers<-1:nrow(mixt)
mixt
pie(consecutive_numbers,R_Cntry)
pie(R_Cntry)
pie(mixt$R_Cntry)
pie(mixt$consecutive_numbers, mixt$R_Cntry)
x =pie(mixt$consecutive_numbers, mixt$R_Cntry)
pie(mixt$R_Cntry)
mixt %>%
group_by(R_Cntry)%>%
count()
mixt %>%
ggplot(mixt, aes(x=R_Cntry, y=count())) +
geom_bar(stat = "identity", width=0.2)
ggplot(mixt, aes(x=R_Cntry, y=count()) +
mixt %>%
ggplot(mixt, aes(x=R_Cntry, y=count())) +
geom_bar(stat = "identity", width=0.2)
list = mixt %>%
list = mixt %>%
group_by(R_Cntry)%>%
count()
View(list)
geom_bar()
ggplot(aes(x=R_Cntry, y=n()) +
list %>%
ggplot(aes(x=R_Cntry, y=n()) +
geom_bar()
list %>%
list %>%
ggplot(aes(x=R_Cntry, y=count())) +
geom_bar(stat = "identity", width=0.2)
list %>%
ggplot(aes(x=R_Cntry, y=n)) +
geom_bar(stat = "identity", width=0.2)
Percents = list%>%
mutate(Percent = n/sum(n))
View(Percents)
Percents = list%>%
mutate(sum =sum(n))
View(Percents)
list$totals<-rowSums(list[,1:142])
list$totals<-rowSums(list[1:142,])
list$totals<-columnSums(list[1:142,])
list$totals<-colSums(list[1:142,])
colSums(list$n)
colSums(n)
colSums(list$n, na.rm = TRUE)
colSums(list)
sum(lsit$n,na.rm=TRUE)
sum(list$n,na.rm=TRUE)
sum(list$n,na.rm=FALSE)
sum(list[[1:142,]],na.rm=FALSE)
sum(list[1:142,],na.rm=FALSE)
list= list%>%
filter (!is.na())
list= list%>%
filter (!is.na(R_Cntry))
sum(list$n,na.rm=FALSE)
621829-545336
View(Percents)
Percents = list%>%
mutate(percent = n/545336)
View(Percents)
Percents = list%>%
mutate(percent = n/545336)
View(Percents)
Percents = list%>%
mutate(percent = (n/545336)*100)
View(Percents)
Percents
plot(Percents)
barplot(Percents)
pie(Percents)
pie(Percents$R_Cntry, Percents$percent)
ggplot(list, aes(x=R_Cntry, fill=n))+
geom_bar(width = 1)+
coord_polar("y")
ggplot(list, aes(x=R_Cntry, fill=R_Cntry))+
geom_bar(width = 1)+
coord_polar("y")
ggplot(list, aes(x=R_Cntry, fill=n))+
geom_bar()+
coord_polar("y")
list %>%
arrange(n) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=n) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=Value), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme_ipsum() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
list %>%
arrange(n) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=n) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=Value), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
list %>%
arrange(n) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=n) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=n), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
Percents %>%
arrange(R_Cntry) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=n) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=n), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
library(tidyverse)
Percents %>%
arrange(R_Cntry) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=percent) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=percent), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
Percents %>%
arrange(percent) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=percent) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=percent), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
Percents %>%
arrange(percent) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=percent) ) +
geom_segment( aes(x=Country ,xend=Country, y=10, yend=percent), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
Percents %>%
arrange(percent) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=percent) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=percent), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
Percents %>%
arrange(percent) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=percent) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=percent), color="grey") +
geom_point(size=2, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("")
Percents %>%
arrange(percent) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=percent) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=percent), color="grey") +
geom_point(size=2, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("Pecent")
Percents %>%
arrange(percent) %>%
mutate(Country=factor(R_Cntry)) %>%
ggplot( aes(x=Country, y=percent) ) +
geom_segment( aes(x=Country ,xend=Country, y=0, yend=percent), color="grey") +
geom_point(size=2, color="#69b3a2") +
coord_flip() +
theme_bw() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("Country")
write.csv(Percents,file = "Totals_Mixtile.csv")
install.packages(c("bayestestR", "bit", "broom", "bslib", "cachem", "cli", "colorspace", "cpp11", "crayon", "curl", "data.table", "datawizard", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "e1071", "effectsize", "emmeans", "estimability", "evaluate", "extrafont", "fansi", "fastmap", "forcats", "Formula", "fs", "gargle", "gdtools", "ggeffects", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsci", "ggsignif", "googlesheets4", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httr", "insight", "installr", "isoband", "janitor", "jpeg", "jsonlite", "knitr", "labelled", "lifecycle", "lubridate", "maptools", "markdown", "MatrixModels", "minqa", "modelr", "modelsummary", "parameters", "pbkrtest", "performance", "pillar", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "sjstats", "sp", "stringi", "stringr", "svglite", "sys", "tables", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vcd", "vctrs", "viridisLite", "vroom", "webshot", "xfun", "yaml", "zoo"))
install.packages(c("bayestestR", "bit", "broom", "bslib", "cachem", "cli", "colorspace", "cpp11", "crayon", "curl", "data.table", "datawizard", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "e1071", "effectsize", "emmeans", "estimability", "evaluate", "extrafont", "fansi", "fastmap", "forcats", "Formula", "fs", "gargle", "gdtools", "ggeffects", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsci", "ggsignif", "googlesheets4", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmltools", "htmlwidgets", "httr", "insight", "installr", "isoband", "janitor", "jpeg", "jsonlite", "knitr", "labelled", "lifecycle", "lubridate", "maptools", "markdown", "MatrixModels", "minqa", "modelr", "modelsummary", "parameters", "pbkrtest", "performance", "pillar", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "sjstats", "sp", "stringi", "stringr", "svglite", "sys", "tables", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vcd", "vctrs", "viridisLite", "vroom", "webshot", "xfun", "yaml", "zoo"))
library(p8105.datasets)
devtools::install_github("p8105/p8105.datasets")
install.packages("cli")
install.packages("cli")
devtools::install_github("p8105/p8105.datasets")
install.packages("cli")
install.packages(c("Hmisc", "tibble"))
install.packages("cli")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='lizbethgomez',
token='8DBB37650AD73A67A0F70A3376D3B9ED',
secret='Dem0ti9mYFOyN+KyQFwFNF5D9K9HogTwg4gXWU3y')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
setwd("C:/Users/lg688/OneDrive - Drexel University/Desktop/Drexel/Other/lizbethgomez.github.io")
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
library(shiny)
runApp()
runApp(Server.R)
runApp(Server)
library(shiny)
runApp(Server)
setwd("C:/Users/lg688/OneDrive - Drexel University/Desktop/Drexel/Other/lizbethgomez.github.io")
runApp(Server)
library(shiny)
runApp(Server.R)
liibra
library(shiny)
runApp(Server.R)
runApp(Server.R)
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
library(flexdashboard)
library(tidyverse)
install.packages("cli", dependencies = FALSE)
library(flexdashboard)
library(tidyverse)
library(viridis)
library(p8105.datasets)
devtools::install_github("p8105/p8105.datasets")
install.packages("cli", dependencies = FALSE)
